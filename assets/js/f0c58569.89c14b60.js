"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[169],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,y=c["".concat(o,".").concat(m)]||c[m]||p[m]||i;return n?r.createElement(y,l(l({ref:t},d),{},{components:n})):r.createElement(y,l({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4575:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(9496),a=n(5924);const i={tabItem:"tabItem_rlDe"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,l),hidden:n},t)}},7934:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(1966),a=n(9496),i=n(5924),l=n(6888),s=n(3442),o=n(4475),u=n(8423),d=n(1010);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=p(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[o,u]=y({queryString:n,groupId:r}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=o??c;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var b=n(6648);const f={tabList:"tabList_t2F_",tabItem:"tabItem_TXTv"};function v(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),r=u[n].value;r!==s&&(c(t),o(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,i.Z)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=h(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(g,(0,r.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return a.createElement(k,(0,r.Z)({key:String(t)},e))}},3327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=n(1966),a=(n(9496),n(9613)),i=n(7934),l=n(4575);const s={description:"Learn how to use the 'observe' method to bind logic to entities"},o="Observers and Entities",u={unversionedId:"guides/observers-and-entities",id:"guides/observers-and-entities",title:"Observers and Entities",description:"Learn how to use the 'observe' method to bind logic to entities",source:"@site/docs/guides/observers-and-entities.md",sourceDirName:"guides",slug:"/guides/observers-and-entities",permalink:"/reflex/docs/guides/observers-and-entities",draft:!1,tags:[],version:"current",frontMatter:{description:"Learn how to use the 'observe' method to bind logic to entities"},sidebar:"learnSidebar",previous:{title:"Subscribing to State",permalink:"/reflex/docs/guides/subscribing-to-state"},next:{title:"Roact Reflex",permalink:"/reflex/docs/guides/roact-reflex/"}},d={},c=[{value:"The Observer pattern",id:"the-observer-pattern",level:2},{value:"Understanding Observers",id:"understanding-observers",level:2},{value:"Selecting entities",id:"selecting-entities",level:3},{value:"Tracking additions",id:"tracking-additions",level:3},{value:"Waiting for deletion",id:"waiting-for-deletion",level:3},{value:"Calling the Observer",id:"calling-the-observer",level:3},{value:"Create Observers with <code>observe</code>",id:"create-observers-with-observe",level:2},{value:"Observing individual players",id:"observing-individual-players",level:3},{value:"Summary",id:"summary",level:2}],p={toc:c},m="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"observers-and-entities"},"Observers and Entities"),(0,a.kt)("p",null,"Often, you'll want to run code over the lifetime of an entity. You can use ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#observeselector-discriminator-observer"},(0,a.kt)("inlineCode",{parentName:"a"},"observe"))," for all kinds of lists and records of entities, from players to in-game matches."),(0,a.kt)("admonition",{title:"what you'll learn",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"\ud83d\udcda What entities and observers are"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udd0d How to track an entity manually"),(0,a.kt)("li",{parentName:"ul"},"\ud83d\udd17 How to use ",(0,a.kt)("inlineCode",{parentName:"li"},"observe")," to track entities"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"the-observer-pattern"},"The Observer pattern"),(0,a.kt)("p",null,"In Reflex, an ",(0,a.kt)("strong",{parentName:"p"},"entity")," is a record of data that represents a player, match, or other object in your game. You can use entities to store data about the object, like its health or position."),(0,a.kt)("p",null,"An ",(0,a.kt)("strong",{parentName:"p"},"Observer")," is a function that binds some logic to an entity over its ",(0,a.kt)("em",{parentName:"p"},"lifetime"),". The lifetime of an entity is the time between when it's created and when it's removed from the record."),(0,a.kt)("p",null,"An Observer can be used to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Spawn players when they're added to an ongoing game"),(0,a.kt)("li",{parentName:"ul"},"Apply temporary status effects to players"),(0,a.kt)("li",{parentName:"ul"},"Clean up connections when players are eliminated or disconnect")),(0,a.kt)("p",null,"And much more! ",(0,a.kt)("a",{parentName:"p",href:"https://sleitnick.github.io/RbxObservers/docs/observer-pattern"},"Read more about the Observer pattern \u2192")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"understanding-observers"},"Understanding Observers"),(0,a.kt)("p",null,"On ",(0,a.kt)("a",{parentName:"p",href:"subscribing-to-state"},"Subscribing to State"),", you learned how to use ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#subscribeselector-predicate-listener"},(0,a.kt)("inlineCode",{parentName:"a"},"subscribe")),", ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#onceselector-predicate-listener"},(0,a.kt)("inlineCode",{parentName:"a"},"once")),", and ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#waitselector-predicate"},(0,a.kt)("inlineCode",{parentName:"a"},"wait"))," to run side effects for a player's health bar. But the examples only covered running side effects on ",(0,a.kt)("em",{parentName:"p"},"one")," player. How can you bind this extra logic for the lifetime of ",(0,a.kt)("em",{parentName:"p"},"every")," player?"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"observe")," to do this, but to understand how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"observe"),", let's first look at how you might write your own Observer."),(0,a.kt)("p",null,"A general implementation of Observers requires a few things:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A record of entities to track"),(0,a.kt)("li",{parentName:"ol"},"Call the Observer when an entity is ",(0,a.kt)("strong",{parentName:"li"},"added"),", and clean up when it's ",(0,a.kt)("strong",{parentName:"li"},"removed")),(0,a.kt)("li",{parentName:"ol"},"A way to identify the entity to track its whole lifetime")),(0,a.kt)("h3",{id:"selecting-entities"},"Selecting entities"),(0,a.kt)("p",null,"To track entities, you need a record of them. In the ",(0,a.kt)("a",{parentName:"p",href:"subscribing-to-state#player-list"},"Player list")," example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"players")," slice stores a map of players by their ID. You can write a selector that returns this record:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { RootState } from "./producer";\n\nexport const selectPlayersById = (state: RootState) => {\n    return state.players.entities;\n};\n'))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local producer = require(script.Parent.producer)\n\nlocal function selectPlayersById(state: producer.RootState)\n    return state.players.entities\nend\n")))),(0,a.kt)("h3",{id:"tracking-additions"},"Tracking additions"),(0,a.kt)("p",null,"To track when an entity is added to the record, you can use the current and previous states passed to ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#subscribeselector-predicate-listener"},(0,a.kt)("inlineCode",{parentName:"a"},"subscribe")),". When a player is added to the record, the previous state will not have the player, but the current state will. You can use this to filter out new players:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function entityAdded(entity: PlayerEntity) {\n    // Player was added\n}\n\nproducer.subscribe(selectPlayersById, (current, previous) => {\n    for (const [id, player] of pairs(current)) {\n        if (previous[id] === undefined) {\n            // highlight-next-line\n            entityAdded(player);\n        }\n    }\n});\n"))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local function entityAdded(entity: players.PlayerEntity)\n    -- Player was added\nend\n\nproducer:subscribe(selectPlayersByid, function(current, previous)\n    for id, player in current do\n        if previous[id] == nil then\n            // highlight-next-line\n            entityAdded(player)\n        end\n    end\nend)\n")))),(0,a.kt)("h3",{id:"waiting-for-deletion"},"Waiting for deletion"),(0,a.kt)("p",null,"To track when an entity is removed from the record, you can use ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#onceselector-predicate-listener"},(0,a.kt)("inlineCode",{parentName:"a"},"once"))," to create a listener that runs when the entity is not in the new state:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function entityAdded(entity: PlayerEntity) {\n    const doesNotHaveEntity = (entities: PlayerEntityRecord) => {\n        return entities[entity.id] === undefined;\n    };\n\n    // highlight-start\n    producer.once(selectPlayersById, doesNotHaveEntity, () => {\n        // Player was removed\n    });\n    // highlight-end\n}\n"))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local function entityAdded(entity: players.PlayerEntity)\n    local function doesNotHaveEntity(entities: players.PlayerEntityRecord)\n        return entities[entity.id] == nil\n    end\n\n    // highlight-start\n    producer:once(selectPlayersById, doesNotHaveEntity, function()\n        -- Player was removed\n    end)\n    // highlight-end\nend\n")))),(0,a.kt)("h3",{id:"calling-the-observer"},"Calling the Observer"),(0,a.kt)("p",null,"Now that you have a way to track entities, you can connect an Observer to the entity's lifetime:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Observer"',title:'"Observer"'},"function playerObserver(player: PlayerEntity) {\n    // Player was added\n\n    return () => {\n        // Player was removed\n    };\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Observer handler"',title:'"Observer','handler"':!0},"function entityAdded(entity: PlayerEntity) {\n    const doesNotHaveEntity = (entities: PlayerEntityRecord) => {\n        return entities[entity.id] === undefined;\n    };\n\n    // highlight-next-line\n    const cleanup = playerObserver(entity);\n\n    producer.once(selectPlayersById, doesNotHaveEntity, () => {\n        // highlight-next-line\n        cleanup();\n    });\n}\n\nproducer.subscribe(selectPlayersById, (current, previous) => {\n    for (const [id, player] of pairs(current)) {\n        if (previous[id] === undefined) {\n            entityAdded(player);\n        }\n    }\n});\n"))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Observer"',title:'"Observer"'},"local function playerObserver(player: players.PlayerEntity)\n    -- Player was added\n\n    return function()\n        -- Player was removed\n    end\nend\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Observer handler"',title:'"Observer','handler"':!0},"local function entityAdded(entity: players.PlayerEntity)\n    local function doesNotHaveEntity(entities: players.PlayerEntityRecord)\n        return entities[entity.id] == nil\n    end\n\n    // highlight-next-line\n    local cleanup = playerObserver(entity)\n\n    producer:once(selectPlayersById, doesNotHaveEntity, function()\n        // highlight-next-line\n        cleanup()\n    end)\nend\n\nproducer:subscribe(selectPlayersById, function(current, previous)\n    for id, player in current do\n        if previous[id] == nil then\n            entityAdded(player)\n        end\n    end\nend)\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"We've brought the Observer pattern into Reflex!")," You can run side effects in the ",(0,a.kt)("inlineCode",{parentName:"p"},"playerObserver")," function, and clean them up when the Observer is removed."),(0,a.kt)("p",null,"While this works, it's a lot of code to write for something that should be simple. This is where ",(0,a.kt)("inlineCode",{parentName:"p"},"observe")," comes in."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"create-observers-with-observe"},"Create Observers with ",(0,a.kt)("inlineCode",{parentName:"h2"},"observe")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#observeselector-discriminator-observer"},(0,a.kt)("inlineCode",{parentName:"a"},"observe"))," method is a shorthand for creating Observers. It takes a ",(0,a.kt)("em",{parentName:"p"},"selector"),", a ",(0,a.kt)("em",{parentName:"p"},"discriminator"),", and an ",(0,a.kt)("em",{parentName:"p"},"Observer")," function."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("strong",{parentName:"li"},"selector")," is used to select a record of entities to track, and it can return an array or a dictionary. We will use the ",(0,a.kt)("a",{parentName:"li",href:"#selecting-entities"},(0,a.kt)("inlineCode",{parentName:"a"},"selectPlayersById"))," selector from earlier."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("strong",{parentName:"li"},"discriminator")," is a function that takes the current state and returns a value that uniquely identifies the entity. We will use the ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," property of the entity."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("strong",{parentName:"li"},"Observer")," function runs when an entity is added, and returns an optional cleanup function that runs when the entity is removed.")),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const getPlayerId = (player: PlayerEntity) => {\n    return player.id;\n};\n\nproducer.observe(selectPlayersById, getPlayerId, (player) => {\n    // Player was added\n\n    return () => {\n        // Player was removed\n    };\n});\n"))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local function getPlayerId(player: players.PlayerEntity)\n    return player.id\nend\n\nproducer:observe(selectPlayersById, getPlayerId, function(player)\n    -- Player was added\n\n    return function()\n        -- Player was removed\n    end\nend)\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This is essentially the same as our custom Observers, but with ",(0,a.kt)("em",{parentName:"strong"},"much")," less code!")," The ",(0,a.kt)("inlineCode",{parentName:"p"},"observe")," method will automatically track when the entity is added and removed, and run the Observer function accordingly."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"If the record is already populated with entities,")," the Observer function will be initialized for each entity in the record when you call ",(0,a.kt)("inlineCode",{parentName:"p"},"observe"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"The discriminator function is optional.")," If you don't provide one, the entity itself will be used as the discriminator. This is only recommended if the entity is a primitive value, like a string or number.")))),(0,a.kt)("h3",{id:"observing-individual-players"},"Observing individual players"),(0,a.kt)("p",null,"On ",(0,a.kt)("a",{parentName:"p",href:"subscribing-to-state"},"Subscribing to State"),", we left off at playing a sound when one player gets damaged. We made a ",(0,a.kt)("a",{parentName:"p",href:"using-selectors#passing-arguments-to-selectors"},"selector factory")," to select the health of a player by ID, wrote a ",(0,a.kt)("inlineCode",{parentName:"p"},"didDecrease")," predicate to check if the health decreased, and subscribed to decreases in health:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const selectPlayerHealthById = (id: string) => {\n    return (state: RootState) => {\n        return state.players.entities[id].health;\n    };\n};\n\nconst didDecrease = (current: number, previous: number) => {\n    return current < previous;\n};\n\nconst selectHealth = selectPlayerHealthById("Player1");\n\n// highlight-start\nproducer.subscribe(selectHealth, didDecrease, () => {\n    // Play sound\n});\n// highlight-end\n'))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local function selectPlayerHealthById(id: string)\n    return function(state: RootState)\n        return state.players.entities[id].health\n    end\nend\n\nlocal function didDecrease(current: number, previous: number)\n    return current < previous\nend\n\nlocal selectHealth = selectPlayerHealthById("Player1")\n\n// highlight-start\nproducer:subscribe(selectHealth, didDecrease, function()\n    -- Play sound\nend)\n// highlight-end\n')))),(0,a.kt)("p",null,"But now that we can observe the lifetime players, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"observe")," to play a sound when any player gets damaged:"),(0,a.kt)(i.Z,{groupId:"languages",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"producer.observe(selectPlayersById, getPlayerId, (player) => {\n    const selectHealth = selectPlayerHealthById(player.id);\n\n    // highlight-start\n    return producer.subscribe(selectHealth, didDecrease, () => {\n        // Play sound\n    });\n    // highlight-end\n});\n"))),(0,a.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"producer:observe(selectPlayersById, getPlayerId, function(player)\n    local selectHealth = selectPlayerHealthById(player.id)\n\n    // highlight-start\n    return producer:subscribe(selectHealth, didDecrease, function()\n        -- Play sound\n    end)\n    // highlight-end\nend)\n")))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("a",{parentName:"p",href:"../reference/reflex/producer#subscribeselector-predicate-handler"},(0,a.kt)("inlineCode",{parentName:"a"},"subscribe"))," method returns a cleanup function that disconnects the listener. We can return this function as our Observer's cleanup function.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"You're now ready to use Reflex in your games!")," The guides from here on out will focus on more advanced topics, but you can always refer back to the earlier guides if you need a refresher."),(0,a.kt)("p",null,"Let's recap what we've learned about Observers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Entities")," are unique objects that can be added and removed from the state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Observers")," are functions that run over the lifetime of an entity."),(0,a.kt)("li",{parentName:"ul"},"To create an observer, call ",(0,a.kt)("a",{parentName:"li",href:"../reference/reflex/producer#observeselector-discriminator-observer"},(0,a.kt)("inlineCode",{parentName:"a"},"observe"))," with a selector, a discriminator, and an Observer function.")))}y.isMDXComponent=!0}}]);