"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[343],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,u(u({ref:t},s),{},{components:n})):a.createElement(f,u({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,u=new Array(o);u[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,u[1]=l;for(var c=2;c<o;c++)u[c]=n[c];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4575:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(9496),r=n(5924);const o={tabItem:"tabItem_rlDe"};function u(e){let{children:t,hidden:n,className:u}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,u),hidden:n},t)}},7934:(e,t,n)=>{n.d(t,{Z:()=>x});var a=n(1966),r=n(9496),o=n(5924),u=n(6888),l=n(3442),i=n(4475),c=n(8423),s=n(1010);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[u,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,c]=f({queryString:n,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,s.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=i??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:u,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),h(e)}),[c,h,o]),tabValues:o}}var b=n(6648);const g={tabList:"tabList_t2F_",tabItem:"tabItem_TXTv"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:c}=e;const s=[],{blockElementScrollPositionUntilNextRender:p}=(0,u.o5)(),d=e=>{const t=e.currentTarget,n=s.indexOf(t),a=c[n].value;a!==l&&(p(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:u}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>s.push(e),onKeyDown:m,onClick:d},u,{className:(0,o.Z)("tabs__item",g.tabItem,u?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=h(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function x(e){const t=(0,b.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},7072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(1966),r=(n(9496),n(9613)),o=n(7934),u=n(4575);const l={sidebar_position:1},i="createProducer",c={unversionedId:"reference/reflex/apis/create-producer",id:"reference/reflex/apis/create-producer",title:"createProducer",description:"createProducer lets you create a producer that contains a part of your game's state.",source:"@site/docs/reference/reflex/apis/create-producer.md",sourceDirName:"reference/reflex/apis",slug:"/reference/reflex/apis/create-producer",permalink:"/reflex/docs/reference/reflex/apis/create-producer",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"referenceSidebar",previous:{title:"APIs",permalink:"/reflex/docs/reference/reflex/apis/"},next:{title:"Producer",permalink:"/reflex/docs/reference/reflex/apis/producer"}},s={},p=[{value:"Reference",id:"reference",level:2},{value:"<code>createProducer(initialState, actions)</code>",id:"createproducerinitialstate-actions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>actions</code> object",id:"actions-object",level:3},{value:"Usage",id:"usage",level:2},{value:"Updating state",id:"updating-state",level:3},{value:"Updating nested state",id:"updating-nested-state",level:3},{value:"Importing and exporting types",id:"importing-and-exporting-types",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Actions aren&#39;t triggering a state update",id:"actions-arent-triggering-a-state-update",level:3}],d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"createproducer"},"createProducer"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createProducer")," lets you create a ",(0,r.kt)("a",{parentName:"p",href:"producer"},"producer")," that contains a part of your game's state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const producer = createProducer(initialState, actions);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reference"},"Reference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#createproducerinitialstate-actions"},(0,r.kt)("inlineCode",{parentName:"a"},"createProducer(initialState, actions)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#actions-object"},(0,r.kt)("inlineCode",{parentName:"a"},"actions")," object")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#usage"},"Usage"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#updating-state"},"Updating state")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#updating-nested-state"},"Updating nested state")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#importing-and-exporting-types"},"Importing and exporting types")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#troubleshooting"},"Troubleshooting"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#actions-arent-triggering-a-state-update"},"Actions aren't triggering a state update"))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("h3",{id:"createproducerinitialstate-actions"},(0,r.kt)("inlineCode",{parentName:"h3"},"createProducer(initialState, actions)")),(0,r.kt)("p",null,"Creates a ",(0,r.kt)("a",{parentName:"p",href:"producer"},"Producer")," initialized with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"initialState")," and merged with your ",(0,r.kt)("inlineCode",{parentName:"p"},"actions"),"."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const producer = createProducer(0, {\n    increment: (state, value: number) => state + value,\n});\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"type Dispatchers = {\n    increment: (value: number) -> CounterState,\n}\n\nlocal producer = Reflex.createProducer(0, {\n    increment = function(state, value: number): number\n        return state + value\n    end,\n}) :: Reflex.Producer<number, Dispatchers>\n")))),(0,r.kt)("p",null,"Actions define how the state should be updated. They are pure functions that receive the current state and some parameters, and return a new state. They can be dispatched through the producer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"producer.increment(1); // state = 1\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#usage"},"See more examples below.")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"initialState")," - The initial state of the producer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actions")," - An object containing action functions.")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createProducer")," returns a Reflex producer that you can use to dispatch actions and subscribe to state changes."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"actions-object"},(0,r.kt)("inlineCode",{parentName:"h3"},"actions")," object"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createProducer")," takes an object containing action functions. Actions are pure functions that receive the current state and some parameters, and return a new state."),(0,r.kt)("p",null,"The producer contains your action functions that you can dispatch to update the state:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const producer = createProducer(0, {\n    increment: (state, value: number) => state + value,\n    decrement: (state, value: number) => state - value,\n    set: (_, value: number) => value,\n    // ...\n});\n\n// highlight-next-line\nproducer.increment(1);\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local producer = Reflex.createProducer(0, {\n    increment = function(state, value: number): number\n        return state + value\n    end,\n    decrement = function(state, value: number): number\n        return state - value\n    end,\n    set = function(_, value: number): number\n        return value\n    end,\n    -- ...\n})\n\n// highlight-next-line\nproducer.increment(1)\n")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"updating-state"},"Updating state"),(0,r.kt)("p",null,"Producers allow you to contain your game's state in a single source of truth."),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"createProducer")," to create a producer with a set of actions that update the state."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"State is immutable. Instead of mutating any part of the state, actions should return a new state object."),(0,r.kt)("p",{parentName:"admonition"},"See libraries like ",(0,r.kt)("a",{parentName:"p",href:"https://csqrl.github.io/sift/"},"Sift")," and ",(0,r.kt)("a",{parentName:"p",href:"https://solarhorizon.github.io/immut/"},"Immut")," for utilities that make it easier to work with immutable data.")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface CounterState {\n    readonly count: number;\n}\n\nconst initialState: CounterState = {\n    count: 0,\n};\n\nconst producer = createProducer(initialState, {\n    increment: (state, value: number) => ({\n        ...state,\n        count: state.count + value,\n    }),\n    // ...\n});\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"type CounterState = {\n    count: number,\n}\n\ntype CounterDispatchers = {\n    increment: (value: number) -> CounterState,\n    -- ...\n}\n\nlocal initialState: CounterState = {\n    count = 0,\n}\n\nlocal producer = Reflex.createProducer(initialState, {\n    increment = function(state, value: number): CounterState\n        return { count = state.count + value }\n    end,\n    -- ...\n}) :: Reflex.Producer<CounterState, CounterDispatchers>\n")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createProducer")," returns a producer combined with your action functions. Producers can update their state by dispatching actions:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"producer.increment(1);\nproducer.getState(); // { count: 1 }\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"producer.increment(1)\nproducer:getState() --\x3e { count = 1 }\n")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updating-nested-state"},"Updating nested state"),(0,r.kt)("p",null,"Because state is immutable, updating nested state can be a bit tricky, especially in Luau."),(0,r.kt)("p",null,"The easiest way to do this is to use a library like ",(0,r.kt)("a",{parentName:"p",href:"https://csqrl.github.io/sift/"},"Sift")," or ",(0,r.kt)("a",{parentName:"p",href:"https://solarhorizon.github.io/immut/"},"Immut")," to update nested state, but you can also do it manually:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface TodoState {\n    readonly todos: readonly Todo[];\n}\n\ninterface Todo {\n    readonly text: string;\n    readonly completed: boolean;\n}\n\nconst initialState: CounterState = {\n    entries: {},\n};\n\nconst producer = createProducer(initialState, {\n    addTodo: (state, text: string) => ({\n        ...state,\n        todos: [...state.todos, { text, completed: false }],\n    }),\n\n    toggleTodo: (state, index: number) => ({\n        ...state,\n        todos: state.todos.map((todo, i) => {\n            if (i !== index) {\n                return todo;\n            }\n            return { ...todo, completed: !todo.completed };\n        }),\n    }),\n});\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"type TodoState = {\n    todos: { Todo },\n}\n\ntype TodoDispatchers = {\n    addTodo: (text: string) -> TodoState,\n    toggleTodo: (index: number) -> TodoState,\n}\n\ntype Todo = {\n    text: string,\n    completed: boolean,\n}\n\nlocal initialState: TodoState = {\n    todos = {},\n}\n\nlocal producer = Reflex.createProducer(initialState, {\n    addTodo = function(state, test: string): TodoState\n        // highlight-start\n        local nextState = table.clone(state)\n        local nextTodos = table.clone(state.todos)\n        // highlight-end\n\n        table.insert(nextTodos, { text = text, completed = false })\n        nextState.todos = nextTodos\n\n        return nextState\n    end,\n\n    toggleTodo = function(state, index: number): TodoState\n        // highlight-start\n        local nextState = table.clone(state)\n        local nextTodos = table.clone(state.todos)\n        local nextTodo = table.clone(nextTodos[index])\n        // highlight-end\n\n        nextTodo.completed = not nextTodo.completed\n        nextTodos[index] = nextTodo\n        nextState.todos = nextTodos\n\n        return nextState\n    end,\n}) :: Reflex.Producer<TodoState, TodoDispatchers>\n")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"importing-and-exporting-types"},"Importing and exporting types"),(0,r.kt)("p",null,"Usually, a project will organize its state between multiple producers in separate files, and then combine them into a single producer."),(0,r.kt)("p",null,"Producer modules should export the type of their state (and dispatchers in Luau) so that the root producer can import them."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This is not required in TypeScript, since types can be inferred from the producer object.")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counter.ts"',title:'"counter.ts"'},"export interface CounterState {\n    readonly count: number;\n}\n\nconst initialState: CounterState = {\n    count: 0,\n};\n\nexport const counterProducer = createProducer(initialState, {\n    increment: (state, value: number) => ({\n        ...state,\n        count: state.count + value,\n    }),\n    // ...\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="root-producer.ts"',title:'"root-producer.ts"'},'import { InferState } from "@rbxts/reflex";\nimport { counterProducer } from "./counter";\n\nexport type RootProducer = typeof producer;\n\nexport type RootState = InferState<RootProducer>;\n\nexport const producer = combineProducers({\n    counter: counterProducer,\n    // ...\n});\n'))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="counter.lua"',title:'"counter.lua"'},"export type CounterState = {\n    count: number,\n}\n\nexport type CounterDispatchers = {\n    increment: (value: number) -> CounterState,\n    -- ...\n}\n\nlocal initialState: CounterState = {\n    count = 0,\n}\n\nlocal counterProducer = Reflex.createProducer(initialState, {\n    increment = function(state, value: number): CounterState\n        return { count = state.count + value }\n    end,\n    -- ...\n})\n\nreturn {\n    producer = counterProducer,\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="init.lua"',title:'"init.lua"'},"local counter = require(script.Parent.counter)\nlocal other = require(script.Parent.other)\n\nexport type RootState = {\n    counter: counter.CounterState,\n    other: other.OtherState,\n}\n\nexport type RootDispatchers = counter.CounterDispatchers &\n    other.OtherDispatchers\n\nexport type RootProducer = Reflex.Producer<RootState, RootDispatchers>\n\nreturn Reflex.combineProducers({\n    counter = counter.producer,\n    other = other.producer,\n}) :: RootProducer\n")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("h3",{id:"actions-arent-triggering-a-state-update"},"Actions aren't triggering a state update"),(0,r.kt)("p",null,"If you're dispatching actions, but your state listeners don't run when they should, make sure that your action functions ",(0,r.kt)("strong",{parentName:"p"},"do not")," mutate the state."),(0,r.kt)("p",null,"Code like this assumes a ",(0,r.kt)("em",{parentName:"p"},"mutable")," state object:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const producer = createProducer(initialState, {\n    increment: (state, value: number) => {\n        // error-next-line\n        state.count += value;\n        return state;\n    },\n});\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local producer = Reflex.createProducer(initialState, {\n    increment = function(state, value: number): CounterState\n        // error-next-line\n        state.count += value\n        return state\n    end,\n})\n")))),(0,r.kt)("p",null,"This action does not return a new state object, so the producer assumes that nothing has changed."),(0,r.kt)("p",null,"To fix this, apply the changes to a new object and return it:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const producer = createProducer(initialState, {\n    increment: (state, value: number) => ({\n        ...state,\n        count: state.count + value,\n    }),\n});\n"))),(0,r.kt)(u.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local producer = Reflex.createProducer(initialState, {\n    increment = function(state, value: number): CounterState\n        // highlight-next-line\n        local nextState = table.clone(state)\n        nextState.count += value\n        return nextState\n    end,\n})\n")))))}f.isMDXComponent=!0}}]);