"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[503],{4791:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>v,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var r=a(1966),n=(a(9496),a(9613)),s=a(7934),i=a(4575),c=a(5488);const o={sidebar_position:7,description:"Create a broadcast receiver to sync the client's root producer with the server's shared state."},l="createBroadcastReceiver",d={unversionedId:"reference/reflex/create-broadcast-receiver",id:"reference/reflex/create-broadcast-receiver",title:"createBroadcastReceiver",description:"Create a broadcast receiver to sync the client's root producer with the server's shared state.",source:"@site/docs/reference/reflex/create-broadcast-receiver.md",sourceDirName:"reference/reflex",slug:"/reference/reflex/create-broadcast-receiver",permalink:"/reflex/docs/reference/reflex/create-broadcast-receiver",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,description:"Create a broadcast receiver to sync the client's root producer with the server's shared state."},sidebar:"referenceSidebar",previous:{title:"createBroadcaster",permalink:"/reflex/docs/reference/reflex/create-broadcaster"},next:{title:"Roact Reflex",permalink:"/reflex/docs/reference/roact-reflex/"}},p={},u=[{value:"Reference",id:"reference",level:2},{value:"<code>createBroadcastReceiver(options)</code>",id:"createbroadcastreceiveroptions",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>receiver.middleware</code>",id:"receivermiddleware",level:3},{value:"<code>receiver.dispatch(actions)</code>",id:"receiverdispatchactions",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Usage",id:"usage",level:2},{value:"Syncing server state on the client",id:"syncing-server-state-on-the-client",level:3},{value:"Sending server state to clients",id:"sending-server-state-to-clients",level:3}],m={toc:u},h="wrapper";function v(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"createbroadcastreceiver"},"createBroadcastReceiver"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"createBroadcastReceiver")," lets you keep the client's state in sync with the server's shared state, whose updates are sent by ",(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster")),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const receiver = createBroadcastReceiver({ requestState });\n")),(0,n.kt)(c.Z,{toc:u,mdxType:"TOCInline"}),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"reference"},"Reference"),(0,n.kt)("h3",{id:"createbroadcastreceiveroptions"},(0,n.kt)("inlineCode",{parentName:"h3"},"createBroadcastReceiver(options)")),(0,n.kt)("p",null,"Call ",(0,n.kt)("inlineCode",{parentName:"p"},"createBroadcastReceiver")," to create a receiver that can be used to connect your state to the ",(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},"broadcaster")," on the server."),(0,n.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { createBroadcastReceiver } from "@rbxts/reflex";\n\nconst receiver = createBroadcastReceiver({\n    requestState: async () => {\n        const remote = await remotes.Client.WaitFor("requestState");\n        return remote.CallServerAsync();\n    },\n});\n'))),(0,n.kt)(i.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local Reflex = require(ReplicatedStorage.Packages.Reflex)\n\nlocal receiver = Reflex.createBroadcastReceiver({\n    requestState = function()\n        return remotes.Client:WaitFor("requestState"):andThen(function(remote)\n            return remote:CallServerAsync()\n        end)\n    end,\n})\n')))),(0,n.kt)("p",null,"Once you have the receiver, you need to apply the middleware to your producer and connect ",(0,n.kt)("a",{parentName:"p",href:"#receiverdispatchactions"},(0,n.kt)("inlineCode",{parentName:"a"},"dispatch"))," to a remote:"),(0,n.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'remotes.Client.OnEvent("broadcast", (actions) => {\n    receiver.dispatch(actions);\n});\n\nproducer.applyMiddleware(receiver.middleware);\n'))),(0,n.kt)(i.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'remotes.Client:OnEvent("broadcast", function(actions)\n    receiver:dispatch(actions)\nend)\n\nproducer:applyMiddleware(receiver.middleware)\n')))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"createBroadcastReceiver")," will request the server's shared state when the middleware is applied, and ",(0,n.kt)("em",{parentName:"p"},"merge")," it with the client's state. This means that the client's state will not be overwritten, but instead updated with the server's state. It is safe to use your producer before the server's state is received."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},"Broadcasters")," send shared actions dispatched on the server to the client through a remote, so you need to connect the receiver's ",(0,n.kt)("a",{parentName:"p",href:"#receiverdispatchactions"},(0,n.kt)("inlineCode",{parentName:"a"},"dispatch"))," method to run the actions passed to the remote."),(0,n.kt)("p",null,"On the server, call ",(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"))," to share state and actions with the client."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"#usage"},"See more examples below.")),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," - An object with options for the broadcast receiver.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"requestState")," - A function that returns a Promise that resolves to the server's shared state.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"createBroadcastReceiver")," returns a receiver object with a ",(0,n.kt)("a",{parentName:"p",href:"#receiverdispatchactions"},(0,n.kt)("inlineCode",{parentName:"a"},"dispatch"))," method and a ",(0,n.kt)("a",{parentName:"p",href:"#receivermiddleware"},(0,n.kt)("inlineCode",{parentName:"a"},"middleware"))," property."),(0,n.kt)("admonition",{title:"caveats",type:"info"},(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"create-broadcaster#the-client-receives-invalid-state"},(0,n.kt)("strong",{parentName:"a"},"Data that is not remote-friendly will be lost."))," Because data is sent through remote events, you will lose metatables, functions, and numeric keys."))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"receivermiddleware"},(0,n.kt)("inlineCode",{parentName:"h3"},"receiver.middleware")),(0,n.kt)("p",null,"Apply the broadcast receiver ",(0,n.kt)("a",{parentName:"p",href:"middleware"},"middleware")," to call ",(0,n.kt)("inlineCode",{parentName:"p"},"requestState")," and initialize the client's root producer with the server's shared state. It's safe to use the producer before this middleware is applied, and order does not matter."),(0,n.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"producer.applyMiddleware(receiver.middleware);\n"))),(0,n.kt)(i.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"producer:applyMiddleware(receiver.middleware)\n")))),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"receiverdispatchactions"},(0,n.kt)("inlineCode",{parentName:"h3"},"receiver.dispatch(actions)")),(0,n.kt)("p",null,"Connect the receiver's ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch")," method to a remote to dispatch the actions passed to the remote."),(0,n.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'remotes.Client.OnEvent("broadcast", (actions) => {\n    receiver.dispatch(actions);\n});\n'))),(0,n.kt)(i.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'remotes.Client:OnEvent("broadcast", function(actions)\n    receiver:dispatch(actions)\nend)\n')))),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"actions")," - An array of ",(0,n.kt)("inlineCode",{parentName:"li"},"BroadcastAction")," objects to dispatch.")),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"receiver.dispatch")," returns nothing."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("h3",{id:"syncing-server-state-on-the-client"},"Syncing server state on the client"),(0,n.kt)("p",null,"If you haven't already, see how to ",(0,n.kt)("a",{parentName:"p",href:"create-broadcaster#sending-server-state-to-clients"},"send server state to clients")," to create a basic project setup. The ",(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"))," page is treated as the primary reference for this feature."),(0,n.kt)("p",null,"Once you have your broadcaster set up, you can use ",(0,n.kt)("a",{parentName:"p",href:"#createbroadcastreceiveroptions"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcastReceiver"))," to initialize the client state with the server's shared state and keep it in sync."),(0,n.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { createBroadcastReceiver } from "@rbxts/reflex";\n\nconst receiver = createBroadcastReceiver({\n    requestState: async () => {\n        const remote = await remotes.Client.WaitFor("requestState");\n        return remote.CallServerAsync();\n    },\n});\n\nremotes.Client.OnEvent("broadcast", (actions) => {\n    receiver.dispatch(actions);\n});\n\nproducer.applyMiddleware(receiver.middleware);\n'))),(0,n.kt)(i.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local Reflex = require(ReplicatedStorage.Packages.Reflex)\n\nlocal receiver = Reflex.createBroadcastReceiver({\n    requestState = function()\n        return remotes.Client:WaitFor("requestState"):andThen(function(remote)\n            return remote:CallServerAsync()\n        end)\n    end,\n})\n\nremotes.Client:OnEvent("broadcast", function(actions)\n    receiver:dispatch(actions)\nend)\n\nproducer:applyMiddleware(receiver.middleware)\n')))),(0,n.kt)("p",null,"This code will call ",(0,n.kt)("inlineCode",{parentName:"p"},"requestState")," when the middleware is applied, and merge the server's shared state with the client's state. You should also connect the receiver's ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch")," method to the remote, so that the state continues to be kept in sync."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"It's user-friendly,")," as you can set up ",(0,n.kt)("inlineCode",{parentName:"p"},"createBroadcastReceiver")," in a file separate from your producer and it will work as long as you apply the middleware to the producer and connect the receiver's ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch")," method to the remote."),(0,n.kt)("p",null,"It's safe to apply the middleware at any time, and you can even use your producer before the server's state is received."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"sending-server-state-to-clients"},"Sending server state to clients"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"create-broadcaster"},"To share the server's state with clients, see ",(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"),".")))}v.isMDXComponent=!0}}]);