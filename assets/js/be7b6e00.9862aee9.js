"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[107],{9613:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(9496);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return a?r.createElement(h,s(s({ref:t},d),{},{components:a})):r.createElement(h,s({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9372:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(9496),n=a(5924);const o={tabItem:"tabItem_Yo4Q"};function s(e){let{children:t,hidden:a,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(o.tabItem,s),hidden:a},t)}},4638:(e,t,a)=>{a.d(t,{Z:()=>N});var r=a(8028),n=a(9496),o=a(5924),s=a(4005),i=a(3442),l=a(5951),c=a(8378),d=a(7497);function p(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function u(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const r=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,o=u(e),[s,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,c]=h({queryString:a,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,d.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:r}),y=(()=>{const e=l??p;return m({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,o]),tabValues:o}}var y=a(5167);const b={tabList:"tabList_T_FK",tabItem:"tabItem_Mcr7"};function k(e){let{className:t,block:a,selectedValue:i,selectValue:l,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),u=e=>{const t=e.currentTarget,a=d.indexOf(t),r=c[a].value;r!==i&&(p(t),l(r))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:u},s,{className:(0,o.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":i===t})}),a??t)})))}function g(e){let{lazy:t,children:a,selectedValue:r}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=f(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},n.createElement(k,(0,r.Z)({},e,t)),n.createElement(g,(0,r.Z)({},e,t)))}function N(e){const t=(0,y.Z)();return n.createElement(v,(0,r.Z)({key:String(t)},e))}},1857:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=a(8028),n=(a(9496),a(9613)),o=a(4638),s=a(9372);const i={description:"Learn how to use broadcasters to sync state between the server and clients."},l="Server-Client Sync",c={unversionedId:"advanced-guides/server-client-sync",id:"advanced-guides/server-client-sync",title:"Server-Client Sync",description:"Learn how to use broadcasters to sync state between the server and clients.",source:"@site/docs/advanced-guides/server-client-sync.md",sourceDirName:"advanced-guides",slug:"/advanced-guides/server-client-sync",permalink:"/reflex/docs/advanced-guides/server-client-sync",draft:!1,tags:[],version:"current",frontMatter:{description:"Learn how to use broadcasters to sync state between the server and clients."},sidebar:"learnSidebar",previous:{title:"Middleware",permalink:"/reflex/docs/advanced-guides/middleware"}},d={},p=[{value:"Sync state",id:"sync-state",level:2},{value:"Sharing state",id:"sharing-state",level:3},{value:"Creating a broadcaster",id:"creating-a-broadcaster",level:3},{value:"Creating a receiver",id:"creating-a-receiver",level:3},{value:"Privacy",id:"privacy",level:2},{value:"Filtering actions",id:"filtering-actions",level:3},{value:"Filtering state",id:"filtering-state",level:3},{value:"Summary",id:"summary",level:2}],u={toc:p},m="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"server-client-sync"},"Server-Client Sync"),(0,n.kt)("p",null,"Reflex provides a quick way to sync the server's shared state with clients using ",(0,n.kt)("strong",{parentName:"p"},"broadcasters")," and ",(0,n.kt)("strong",{parentName:"p"},"receivers"),"."),(0,n.kt)("admonition",{title:"what you'll learn",type:"note"},(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"\ud83c\udf0e How to share state between the server and clients"),(0,n.kt)("li",{parentName:"ul"},"\ud83d\udef0\ufe0f How to create broadcasters and receivers"),(0,n.kt)("li",{parentName:"ul"},"\ud83d\udd12 Recipes for protecting data the client shouldn't have access to"))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"sync-state"},"Sync state"),(0,n.kt)("p",null,"Reflex is designed to be used in any environment, on the client and the server. However, in game development, many cases come up where you need to send state from the server to clients. This is where the concept of ",(0,n.kt)("strong",{parentName:"p"},"shared slices")," comes in."),(0,n.kt)("h3",{id:"sharing-state"},"Sharing state"),(0,n.kt)("p",null,"Shared slices are producers that are managed by the server and synced with clients. To create shared slices, we'll follow this file hierarchy:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"shared\n\u251c\u2500\u2500 slices\n\u2502   \u251c\u2500\u2500 calendar\n\u2502   \u2514\u2500\u2500 todos\n\u2514\u2500\u2500 remotes\n")),(0,n.kt)("p",null,"Your shared ",(0,n.kt)("inlineCode",{parentName:"p"},"slices")," module should look something like this:"),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="shared/slices/index.ts" showLineNumbers',title:'"shared/slices/index.ts"',showLineNumbers:!0},'import { CombineStates } from "@rbxts/reflex";\nimport { calendarSlice } from "./calendar";\nimport { todosSlice } from "./todos";\n\nexport type SharedState = CombineStates<typeof slices>;\n\nexport const slices = {\n    calendar: calendarSlice,\n    todos: todosSlice,\n};\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Exporting ",(0,n.kt)("inlineCode",{parentName:"p"},"SharedState")," as a type makes it easier to create typed selectors without importing across the client/server boundary."),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { SharedState } from "shared/slices";\n\nexport const selectPlayers = (state: SharedState) => state.players;\n')))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="shared/slices/init.lua" showLineNumbers',title:'"shared/slices/init.lua"',showLineNumbers:!0},"local Reflex = require(ReplicatedStorage.Packages.Reflex)\nlocal calendar = require(script.calendar)\nlocal todos = require(script.todos)\n\nexport type SharedState = {\n    calendar: calendar.CalendarState,\n    todos: todos.TodosState,\n}\n\nexport type SharedActions = calendar.CalendarActions & todos.TodosActions\n\nreturn {\n    calendar = calendar.calendarSlice,\n    todos = todos.todosSlice,\n}\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Exporting ",(0,n.kt)("inlineCode",{parentName:"p"},"SharedState")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"SharedActions")," helps to build a fully-typed root producer.")))),(0,n.kt)("p",null,"In this example, we have two shared producer slices: ",(0,n.kt)("inlineCode",{parentName:"p"},"calendar")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"todos"),". They are put together in a map and returned by ",(0,n.kt)("inlineCode",{parentName:"p"},"shared/slices"),". The contents of these files are not important - they're just like any other producer - but if you want to see how to write producers, ",(0,n.kt)("a",{parentName:"p",href:"../guides/your-first-producer"},"check out this guide")),(0,n.kt)("p",null,"Using a map of shared slices makes it easy to add them to your root producer. In your root producer file, you can import the shared slices and spread them into your root producer:"),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Root producer" showLineNumbers',title:'"Root','producer"':!0,showLineNumbers:!0},'import { InferState, combineProducers } from "@rbxts/reflex";\nimport { slices } from "shared/slices";\nimport { fooSlice } from "./foo";\nimport { barSlice } from "./bar";\n\nexport type RootState = InferState<typeof producer>;\n\nexport const producer = combineProducers({\n    ...slices,\n    foo: fooSlice,\n    bar: barSlice,\n});\n'))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Root producer" showLineNumbers',title:'"Root','producer"':!0,showLineNumbers:!0},"local Reflex = require(ReplicatedStorage.Packages.Reflex)\nlocal slices = require(ReplicatedStorage.shared.slices)\nlocal foo = require(script.foo)\nlocal bar = require(script.bar)\n\nexport type RootProducer = Reflex.Producer<RootState, RootActions>\n\nexport type RootState = slices.SharedState &\n    foo.FooState &\n    bar.BarState\n\nexport type RootActions = slices.SharedActions &\n    foo.FooActions &\n    bar.BarActions\n\nlocal rootSlices = {\n    foo = foo.fooSlice,\n    bar = bar.barSlice,\n}\n\nfor name, slice in slices do\n    rootSlices[name] = slice\nend\n\nreturn Reflex.combineProducers(rootSlices) :: RootProducer\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Libraries like ",(0,n.kt)("a",{parentName:"p",href:"https://csqrl.github.io/sift/"},"Sift")," can make it easier to merge tables in Luau.")))),(0,n.kt)("p",null,"Now that you have your shared state set up, and include them in both your client and server's root producer, you can now use ",(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcaster#createbroadcasteroptions"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"))," to send state to clients."),(0,n.kt)("h3",{id:"creating-a-broadcaster"},"Creating a broadcaster"),(0,n.kt)("p",null,"You should call ",(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcaster#createbroadcasteroptions"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"))," on the server when your game initializes, either before or after you create your root producer. It receives your shared producer map and a function that sends actions to the clients, and returns a broadcaster object. Make sure you've set up remotes as well:"),(0,n.kt)("admonition",{title:"prerequisites",type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"You need to define your own remotes to use ",(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcaster"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster")),". We recommend ",(0,n.kt)("a",{parentName:"p",href:"http://rbxnet.australis.dev"},"RbxNet"),", or ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/littensy/remo"},"Remo"),", which is used in the examples on this page."),(0,n.kt)("p",{parentName:"admonition"},"You will need two remote events:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"dispatch(player: Player, actions: BroadcastAction[])")," - This is the remote event that will be fired when the server dispatches actions to clients.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"start(player: Player)")," - This is the remote event that the clients will fire once they are ready to receive state from the server.")))),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Server" showLineNumbers',title:'"Server"',showLineNumbers:!0},'import { createBroadcaster } from "@rbxts/reflex";\nimport { remotes } from "shared/remotes";\nimport { slices } from "shared/slices";\nimport { producer } from "./producer";\n\nconst broadcaster = createBroadcaster({\n    producers: slices,\n    dispatch: (player, actions) => {\n        remotes.dispatch.fire(player, actions);\n    },\n});\n\nremotes.start.connect((player) => {\n    broadcaster.start(player);\n});\n\nproducer.applyMiddleware(broadcaster.middleware);\n'))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server" showLineNumbers',title:'"Server"',showLineNumbers:!0},"local Reflex = require(ReplicatedStorage.Packages.Reflex)\nlocal remotes = require(ReplicatedStorage.shared.remotes)\nlocal slices = require(ReplicatedStorage.shared.slices)\nlocal producer = require(script.Parent.producer)\n\nlocal broadcaster = Reflex.createBroadcaster({\n    producers = slices,\n    dispatch = function(player, actions)\n        remotes.dispatch:fire(player, actions)\n    end,\n})\n\nremotes.start:connect(function(player)\n    broadcaster:start(player)\nend)\n\nproducer:applyMiddleware(broadcaster.middleware)\n")))),(0,n.kt)("p",null,"This sets up a broadcaster that sends shared actions to the clients when they're dispatched. Once the middleware is applied, Reflex will begin syncing dispatched actions to the clients."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcaster"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcaster"))," receives the following options:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"producers"),": Your ",(0,n.kt)("em",{parentName:"p"},"shared slices"),". This is used to determine which state and actions should be sent to the client.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"dispatch"),": A user-defined callback that sends shared dispatched actions to the clients. It receives an array of actions and a player to send them to.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"hydrateRate?"),": The rate in seconds at which the server should send the latest state to the clients. The default is ",(0,n.kt)("inlineCode",{parentName:"p"},"60"),", which means that every minute, every client passed to ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," will re-hydrate their store with the latest state.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"#filtering-actions"},(0,n.kt)("inlineCode",{parentName:"a"},"beforeDispatch?"))," and ",(0,n.kt)("a",{parentName:"p",href:"#filtering-state"},(0,n.kt)("inlineCode",{parentName:"a"},"beforeHydrate?"))," for filtering state and actions before a client receives them."))),(0,n.kt)("p",null,"It returns a broadcaster object, which has two properties:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"middleware"),": A Reflex middleware that helps do some of the heavy lifting for you. You should apply this middleware to your root producer. If you have any middlewares that change dispatched arguments, you should apply them after this middleware to ensure that the arguments are preserved.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"start"),": A method that marks the player as ready to begin receiving shared state and actions. This should be called by the client in a ",(0,n.kt)("inlineCode",{parentName:"p"},"broadcastReceiver"),"."))),(0,n.kt)("admonition",{title:"pitfall",type:"caution"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("strong",{parentName:"p"},"Make sure your shared state can be sent over a remote!")," Objects that use non-string keys or certain values will not be sent over intact. See the ",(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcaster#troubleshooting"},"troubleshooting")," page for more information on this common pitfall.")),(0,n.kt)("h3",{id:"creating-a-receiver"},"Creating a receiver"),(0,n.kt)("p",null,"Once you have your broadcaster set up, you can use ",(0,n.kt)("a",{parentName:"p",href:"../reference/reflex/create-broadcast-receiver#createbroadcastreceiveroptions"},(0,n.kt)("inlineCode",{parentName:"a"},"createBroadcastReceiver"))," to initialize the client state with the server's shared state and keep it in sync."),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Client" showLineNumbers',title:'"Client"',showLineNumbers:!0},'import { createBroadcastReceiver } from "@rbxts/reflex";\n\nconst receiver = createBroadcastReceiver({\n    start: () => {\n        remotes.start.fire();\n    },\n});\n\nremotes.dispatch.connect((actions) => {\n    receiver.dispatch(actions);\n});\n\nproducer.applyMiddleware(receiver.middleware);\n'))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client" showLineNumbers',title:'"Client"',showLineNumbers:!0},"local Reflex = require(ReplicatedStorage.Packages.Reflex)\n\nlocal receiver = Reflex.createBroadcastReceiver({\n    start = function()\n        remotes.start.fire()\n    end,\n})\n\nremotes.dispatch:connect(function(actions)\n    receiver:dispatch(actions)\nend)\n\nproducer:applyMiddleware(receiver.middleware)\n")))),(0,n.kt)("p",null,"This code will call ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," when the middleware is applied, and hydrate the client's state with the server's shared state. Calling ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch")," will send the actions from the broadcaster to the client's store and enable automatic hydration."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"It's thread-safe,")," so it's safe to apply the middleware at any time, and you can even use your producer before the server's state is received."),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"privacy"},"Privacy"),(0,n.kt)("h3",{id:"filtering-actions"},"Filtering actions"),(0,n.kt)("p",null,"You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"beforeDispatch")," option to filter or modify actions before they are sent to the client. This is useful if you have sensitive data you don't want to share between clients, or if you want to prevent certain actions from being dispatched to the client."),(0,n.kt)("p",null,"This example will prevent the ",(0,n.kt)("inlineCode",{parentName:"p"},"sensitive")," action from being dispatched to the client if the player's Name is not the first argument:"),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'const broadcaster = createBroadcaster({\n    producers: slices,\n    dispatch: (player, actions) => {\n        remotes.dispatch.fire(player, actions);\n    },\n    beforeDispatch: (player, action) => {\n        // highlight-start\n        if (action.name === "sensitive" && action.arguments[0] !== player.Name) {\n            return;\n        }\n        // highlight-end\n        return action;\n    },\n});\n'))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},'local broadcaster = Reflex.createBroadcaster({\n    producers = slices,\n    dispatch = function(player, actions)\n        remotes.dispatch:fire(player, actions)\n    end,\n    beforeDispatch = function(player, action)\n        // highlight-start\n        if action.name == "sensitive" and action.arguments[1] ~= player.Name then\n            return\n        end\n        // highlight-end\n        return action\n    end,\n})\n')))),(0,n.kt)("h3",{id:"filtering-state"},"Filtering state"),(0,n.kt)("p",null,"You can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"beforeHydrate")," option to filter or modify state before it is sent to the client. This is useful if you store sensitive data you don't want to share with clients."),(0,n.kt)("p",null,"This example filters out all private data except for the current player's data:"),(0,n.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const broadcaster = createBroadcaster({\n    producers: slices,\n    dispatch: (player, actions) => {\n        remotes.dispatch.fire(player, actions);\n    },\n    beforeHydrate: (player, state) => {\n        return {\n            ...state,\n            // highlight-start\n            private: {\n                [player.Name]: state.private[player.Name],\n            },\n            // highlight-end\n        };\n    },\n});\n"))),(0,n.kt)(s.Z,{value:"Luau",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"local broadcaster = Reflex.createBroadcaster({\n    producers = slices,\n    dispatch = function(player, actions)\n        remotes.dispatch:fire(player, actions)\n    end,\n    beforeHydrate = function(player, state)\n        local newState = table.clone(state)\n\n        // highlight-start\n        newState.private = {\n            [player.Name] = state.private[player.Name],\n        }\n        // highlight-end\n\n        return newState\n    end,\n})\n")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"summary"},"Summary"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Shared state is synced between the server and client using a broadcaster and a receiver."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"broadcaster")," is responsible for sending state and actions to the receiver."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"receiver")," is responsible for dispatching actions from the broadcaster."),(0,n.kt)("li",{parentName:"ul"},"You can use the ",(0,n.kt)("inlineCode",{parentName:"li"},"beforeDispatch")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"beforeHydrate")," options to filter actions and state before they are sent to the client.")))}h.isMDXComponent=!0}}]);