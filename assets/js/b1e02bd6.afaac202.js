"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[834],{3965:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>k,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(1966),r=(a(9496),a(9613)),s=a(7934),l=a(4575);const i={description:"Get started with the basics of using Reflex.",slug:"/"},u="Quick Start",o={unversionedId:"quick-start/quick-start",id:"quick-start/quick-start",title:"Quick Start",description:"Get started with the basics of using Reflex.",source:"@site/docs/quick-start/quick-start.md",sourceDirName:"quick-start",slug:"/",permalink:"/reflex/docs/",draft:!1,tags:[],version:"current",frontMatter:{description:"Get started with the basics of using Reflex.",slug:"/"},sidebar:"docsSidebar",next:{title:"Installation",permalink:"/reflex/docs/quick-start/installation"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Start using Reflex",id:"start-using-reflex",level:2},{value:"Use your producer anywhere",id:"use-your-producer-anywhere",level:2}],d={toc:p},m="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Reflex")," is a lightweight state management library that lets you write simple and predictable code to manage state throughout your Roblox game. It is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Sleitnick/rbxts-silo"},"Silo")," library and is inspired by ",(0,r.kt)("a",{parentName:"p",href:"https://redux.js.org/"},"Redux"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Reflex is available on ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rbxts/reflex"},"npm")," and ",(0,r.kt)("a",{parentName:"p",href:"https://wally.run/package/littensy/reflex"},"Wally"),":"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"npm install @rbxts/reflex\n"))),(0,r.kt)(l.Z,{value:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"yarn add @rbxts/reflex\n"))),(0,r.kt)(l.Z,{value:"pnpm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"pnpm add @rbxts/reflex\n"))),(0,r.kt)(l.Z,{value:"Wally",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="wally.toml"',title:'"wally.toml"'},'[dependencies]\nReflex = "littensy/reflex@3.1.0"\n')))),(0,r.kt)("h2",{id:"start-using-reflex"},"Start using Reflex"),(0,r.kt)("p",null,"You're now ready to use Reflex! Where Rodux uses stores, reducers, and actions, Reflex has only ",(0,r.kt)("strong",{parentName:"p"},"actions")," and ",(0,r.kt)("a",{parentName:"p",href:"./reference/reflex/producer"},(0,r.kt)("strong",{parentName:"a"},"producers")),". Create a producer with an initial state and a set of actions, and you're ready to go."),(0,r.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},'import { createProducer } from "@rbxts/reflex";\n\ninterface State {\n    count: number;\n}\n\nconst initialState: State = {\n    count: 0,\n};\n\nconst producer = createProducer(initialState, {\n    increment: (state) => ({ ...state, count: state.count + 1 }),\n    reset: () => ({ ...state, count: 0 }),\n});\n'))),(0,r.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"showLineNumbers",showLineNumbers:!0},"local Reflex = require(ReplicatedStorage.Packages.Reflex)\n\ntype State = {\n    count: number,\n}\n\ntype Actions = {\n    increment: () -> (),\n    reset: () -> (),\n}\n\ntype Producer = Reflex.Producer<State, Actions>\n\nlocal initialState: State = {\n    count = 0,\n}\n\nlocal producer = Reflex.createProducer(initialState, {\n    increment = function(state: State): State\n        return { count = state.count + 1 }\n    end,\n    reset = function(): State\n        return { count = 0 }\n    end,\n}) :: Producer\n")))),(0,r.kt)("h2",{id:"use-your-producer-anywhere"},"Use your producer anywhere"),(0,r.kt)("p",null,"Reflex was designed to make managing your state simple and straightforward. Dispatch actions by calling the action directly, and read & subscribe to state with selectors."),(0,r.kt)(s.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"TypeScript",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"showLineNumbers",showLineNumbers:!0},"producer.subscribe(\n    (state) => state.count,\n    (count) => {\n        print(`The count is now ${count}`);\n    },\n);\n\nproducer.increment(); // The count is now 1\n"))),(0,r.kt)(l.Z,{value:"Luau",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"showLineNumbers",showLineNumbers:!0},'producer:subscribe(function(state)\n    return state.count\nend, function(count)\n    print("The count is now " .. count)\nend)\n\nproducer.increment() --\x3e The count is now 1\n')))))}k.isMDXComponent=!0}}]);